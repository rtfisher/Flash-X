!!****if* source/physics/Hydro/HydroMain/Spark/hy_rk_getGravAccel
!! NOTICE
!!  Copyright 2022 UChicago Argonne, LLC and contributors
!!
!!  Licensed under the Apache License, Version 2.0 (the "License");
!!  you may not use this file except in compliance with the License.
!!
!!  Unless required by applicable law or agreed to in writing, software
!!  distributed under the License is distributed on an "AS IS" BASIS,
!!  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
!!  See the License for the specific language governing permissions and
!!  limitations under the License.
!!
!!
!!  NAME
!!
!!  hy_rk_getGravAccel
!!
!!  SYNOPSIS
!!
!!  call hy_rk_getGravAccel ( real(IN) :: hy_del(:),
!!                         integer(IN) :: limits(:,:),
!!                         integer(IN) :: blkLimitsGC(:,:),
!!                         integer(IN) :: level)
!!
!!  DESCRIPTION
!! 
!!  Get gravitational acceleration for the part of block/tile defined by limits
!!   where blkLimitsGC define full block
!!
!!  ARGUMENTS
!!     blklimits,blkLimitsGC are the bounds of the block/tile
!!     hy_del are dx,dy,dz
!!     limits   sets limits of the fluxes.
!!     level - refinement level.
!!           This is 1-based, i.e., the root level is numbered 1.
!!
!!***


!!Reorder(4):hy_starState

subroutine @M hy_grav_name(@M hy_grav_call_args)
  ! *** This has not been tested with OMP offloading *** !
!!  use Gravity_interface, ONLY : Gravity_accelOneRow
  use Hydro_data, ONLY : hy_grav
  use Driver_interface, ONLY : Driver_abort
  implicit none

#include "Simulation.h"
#include "constants.h"

  real,dimension(MDIM),intent(IN)  :: hy_del
  integer,dimension(LOW:HIGH,MDIM), intent(IN) :: limits, blkLimitsGC
  integer, intent(in)  :: level

  integer, dimension(MDIM) :: loGC, hiGC
  integer :: dir, i,j,k,d

  loGC(:) = blkLimitsGC(LOW,:)
  hiGC(:) = blkLimitsGC(HIGH,:)

  @M hy_grv_omp1
  
  do k = blkLimitsGC(LOW,KAXIS),blkLimitsGC(HIGH,KAXIS)
    do j = blkLimitsGC(LOW,JAXIS),blkLimitsGC(HIGH,JAXIS)
      do i = blkLimitsGC(LOW,IAXIS),blkLimitsGC(HIGH,IAXIS)
        do d = 1,MDIM
          hy_grav(d,i,j,k) = 0.0
        enddo
      enddo
    enddo
  enddo

#ifdef GRAVITY
  @M hy_grv_omp2
  do k=limits(LOW,KAXIS),limits(HIGH,KAXIS)
     do j=limits(LOW,JAXIS),limits(HIGH,JAXIS)
#ifdef FLASH_GRAVITY_TIMEDEP
        ! For time-dependent gravity, we call the local acceleration routine
        ! since the GPOT will be extrapolated forward in time for the RK
        ! sub-stages. A cleaner way might be to pass a pointer to Gravity_accelOneRow
        ! telling it what data structure to use for computing the acceleration.
        call accelOneRow((/j,k/),IAXIS,&
             hiGC(IAXIS)-loGC(IAXIS)+1,hy_grav(IAXIS,:,j,k),hy_del,level,loGC,hiGC)
#else
        call Driver_abort("Gravity that is not FLASH_GRAVITY_TIMEDEP is not currently implemented ")
#endif
     enddo
  enddo
#if NDIM>1
  @M hy_grv_omp3  

#ifdef FLASH_GRAVITY_TIMEDEP
  do k=limits(LOW,KAXIS),limits(HIGH,KAXIS)
     do i=limits(LOW,IAXIS),limits(HIGH,IAXIS)
        call accelOneRow((/i,k/),JAXIS,&
             hiGC(JAXIS)-loGC(JAXIS)+1,hy_grav(JAXIS,i,:,k),hy_del,level,loGC,hiGC)
     enddo
  enddo
#endif
#if NDIM==3

  @M hy_grv_omp4

#ifdef FLASH_GRAVITY_TIMEDEP
  do j=limits(LOW,JAXIS),limits(HIGH,JAXIS)
     do i=limits(LOW,IAXIS),limits(HIGH,IAXIS)
        call accelOneRow((/i,j/),KAXIS,&
             hiGC(KAXIS)-loGC(KAXIS)+1,hy_grav(KAXIS,i,j,:),hy_del,level,loGC,hiGC)
     enddo
  enddo
#endif
#endif
#endif
#endif /* GRAVITY */

contains

  subroutine accelOneRow(pos, sweepDir, numCells, grav, hy_del, level, loGC, hiGC)
    use Hydro_data, ONLY : hy_starState
    use Grid_interface, ONLY : Grid_getCellCoords, Grid_getGeometry

    implicit none

    integer, dimension(2), intent(in) :: pos
    integer, intent(in)               :: sweepDir, numCells
    real, intent(inout)               :: grav(numCells)

    real, intent(in):: hy_del(MDIM)
    integer, intent(in)  :: level
    integer, dimension(MDIM), intent(in) :: loGC, hiGC

    integer         :: ii, iimin, iimax
    real            :: gpot(numCells), delxinv
    integer         :: geometry
    real, allocatable, dimension(:) :: radCenter, thtCenter
    !$omp declare target
    !==================================================

#ifdef GPOT_VAR
    call Grid_getGeometry(geometry)

    ! DEV: TODO Review performance impact of the arrays in this block
    if (geometry == SPHERICAL) then

       !Need radial term if sweeping over theta or phi
       if (sweepDir == SWEEP_Y .or. sweepDir == SWEEP_Z) then
          allocate( radCenter(loGC(IAXIS):hiGC(IAXIS)) )
          call Grid_getCellCoords(IAXIS, CENTER, level, loGC, hiGC, radCenter)
       endif

       !Need theta term if sweeping over phi
       if (sweepDir == SWEEP_Z) then
          allocate( thtCenter(loGC(JAXIS):hiGC(JAXIS)) )
          call Grid_getCellCoords(JAXIS, CENTER, level, loGC, hiGC, thtCenter)
       endif

    else if (geometry == CYLINDRICAL) then

       !Need radial term if sweeping over angle
       if (sweepDir == SWEEP_Z) then
          allocate( radCenter(loGC(IAXIS):hiGC(IAXIS)) )
          call Grid_getCellCoords(IAXIS, CENTER, level, loGC, hiGC, radCenter)
       endif

    endif

    iimin   = 1
    iimax   = numCells
    grav(iimin:iimax) = 0.0

    !Get row of potential values and compute inverse of zone spacing
    if (sweepDir == SWEEP_X) then                     ! x-direction
       delxinv = 1./hy_del(IAXIS)
       gpot(:) = hy_starState(GPOT_VAR,:,pos(1),pos(2))
    elseif (sweepDir == SWEEP_Y) then                 ! y-direction
       delxinv = 1./hy_del(JAXIS)

       !Correct units for spherical coordinates
       if (geometry == SPHERICAL) then
          delxinv = delxinv * ( 1.0 / radCenter(pos(1)) )
       endif

       gpot(:) = hy_starState(GPOT_VAR,pos(1),:,pos(2))
    else                                          ! z-direction
       delxinv = 1./hy_del(KAXIS)

       !Correct units for spherical and cylindrical coordinates
       if (geometry == SPHERICAL) then
          delxinv = delxinv * ( 1.0 / ( radCenter(pos(1)) * sin(thtCenter(pos(2))) ) )
       else if (geometry == CYLINDRICAL) then
          delxinv = delxinv * ( 1.0 / radCenter(pos(1)) )
       endif

       gpot(:) = hy_starState(GPOT_VAR,pos(1),pos(2),:)
    endif

    !----------------------------------------------------------------------
    !               Compute gravitational acceleration
    !**************** first-order differences
    !                 preserves conservation
    delxinv = 0.5e0 * delxinv
    do ii = iimin+1, iimax-1
       grav(ii) = grav(ii) + delxinv * (gpot(ii-1) - gpot(ii+1))
    enddo

    grav(iimin) = grav(iimin+1)     ! this is invalid data - must not be used
    grav(iimax) = grav(iimax-1)

    !Clean up term corrections
    if (geometry == SPHERICAL) then
       if (sweepDir == SWEEP_Y .or. sweepDir == SWEEP_Z) then
          deallocate(radCenter)
       endif

       if (sweepDir == SWEEP_Z) then
          deallocate(thtCenter)
       endif
    else if (geometry == CYLINDRICAL) then
       if (sweepDir == SWEEP_Z) then
          deallocate(radCenter)
       endif
    endif

#else
    ! Assume constant gravitational acceleration

#endif /* GPOT_VAR */
  end subroutine accelOneRow

end subroutine @M hy_grav_name
