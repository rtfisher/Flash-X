!!****if* source/physics/Hydro/HydroMain/Spark/hy_rk_getFaceFlux
!! NOTICE
!!  Copyright 2022 UChicago Argonne, LLC and contributors
!!
!!  Licensed under the Apache License, Version 2.0 (the "License");
!!  you may not use this file except in compliance with the License.
!!
!!  Unless required by applicable law or agreed to in writing, software
!!  distributed under the License is distributed on an "AS IS" BASIS,
!!  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
!!  See the License for the specific language governing permissions and
!!  limitations under the License.
!!
!!  NAME
!!
!!  hy_rk_getFaceFlux
!!
!!  SYNOPSIS
!!
!!  call hy_rk_getFaceFlux ( integer(IN) :: blklimits(:,:),
!!                           integer(IN) :: blklimitsGC(:,:),
!!                           real(IN)    :: hy_del(:),
!!                           integer(IN) :: limits(:,:))
!!
!!  DESCRIPTION
!!  Initially stores grid data by 'pencils' (see subroutine setPencil() below),
!!  calls outside reconstruction subroutine, calls outisde Riemann solver, and 
!!  ultimately yields face fluxes for relevant directions.  These fluxes are lastly 
!!  saved to the grid multifabs (AMReX) for later access.
!!
!!  ARGUMENTS
!!     blklimits,blkLimitsGC are the bounds of the block/tile
!!     hy_del are dx,dy,dz
!!     limits   sets limits of the fluxes.
!!
!!     Note this is a modified form typically yielded
!!     by blockDesc%limits b/c stage 1 of RK integration accounts for NSTENCIL 
!!     number of guard cells beyond the block interior.  Stage 2 only updates the 
!!    interior cells.
!!
!!***

!!Reorder(4):hy_starState,hy_fl[xyz] 
subroutine @M hy_rk_ff_name (@M hy_rk_ff_args)

  use Hydro_data, ONLY : hy_threadWithinBlock, &
       hy_starState, hy_grav, hy_flattening, hy_flx, hy_fly, hy_flz
  use Hydro_data, ONLY : hy_smalldens, hy_smallE, hy_smallpres, hy_smallX, hy_cvisc
  @M hy_rk_ff_use 
  use Timers_interface, ONLY : Timers_start, Timers_stop

  implicit none

#include "Simulation.h"
#include "constants.h"
#include "Spark.h"
#define NRECON HY_NUM_VARS+NSPECIES+NMASS_SCALARS


  integer, intent(IN), dimension(LOW:HIGH,MDIM) :: limits, blkLimits, blkLimitsGC
  @M hy_rk_pointers
  integer :: i1,i2,i3, n, g, v, dir, ierr,i,j,k,i_s,j_s,k_s
  integer, dimension(3) :: gCells
  integer, dimension(LOW:HIGH,MDIM) :: klim,dirbnds
  character(len = 2) :: dir_str
  real :: cvisc, VenerLo, VenerHi, accelM, accelP,dx
  integer :: s	 
  real :: spcSumInv
  real, pointer :: spc(:)  
  
  logical :: inShock
  integer :: pLo,pHi !low and high indices for pencil arrays
  integer :: xLo,yLo,zLo,xHi,yHi,zHi,xLoGC,yLoGC,zLoGC,xHiGC,yHiGC,zHiGC

  !convenience indices
  xLo = blkLimits(LOW,IAXIS); xHi = blkLimits(HIGH,IAXIS)
  yLo = blkLimits(LOW,JAXIS); yHi = blkLimits(HIGH,JAXIS)
  zLo = blkLimits(LOW,KAXIS); zHi = blkLimits(HIGH,KAXIS)

  xLoGC = blkLimitsGC(LOW,IAXIS); xHiGC = blkLimitsGC(HIGH,IAXIS)
  yLoGC = blkLimitsGC(LOW,JAXIS); yHiGC = blkLimitsGC(HIGH,JAXIS)
  zLoGC = blkLimitsGC(LOW,KAXIS); zHiGC = blkLimitsGC(HIGH,KAXIS)

  @M hy_rk_ff_aomp1
  if (hy_flattening) then
     call flattening(hy_flat3d, limits)
  else
     ! call Timers_start("hy_flat3d")
     @M hy_rk_ff_aomp2
     !! TODO: Set this once for both rk steps.
     @M loop_3d(blkLimitsGC)
                  hy_flat3d(i,j,k) = 1.0
     @M loop_end_3d
     ! call Timers_stop("hy_flat3d")
  end if

  @M hy_rk_ff_comp1
   !  Begin loop over zones
  do dir = 1, NDIM
     @M hy_setLoop
     @M hy_rk_ff_comp2

     @M hy_dim_loop
    
           !Define appropriate changing indices
           @M hy_setLims_FF
           @M hy_rk_ff_aomp3
           @M hy_snake_loop
           if (dir == IAXIS) then
              @M setSnake(i,j,k)
           else if (dir == JAXIS) then
              @M setSnake(j,i,k)
           else if (dir == KAXIS) then
              @M setSnake(j,k,i)
           endif
           @M hy_snake_loop_end  

           @M hy_rk_ff_aomp4

           ! call Timers_start("recon"//dir_str)
           @M hy_rk_1
           @M hy_rk_ff_aomp5
           @M hy_rk_loop      
               @M hy_recon_call
           @M hy_rk_loop_end
           @M hy_rk_2    

           @M hy_rk_ff_aomp6
           @M hy_rk_loop

           @M hy_rk_ff_setpointers
           @M hy_ensurePhysicalState(leftState)
           @M hy_ensurePhysicalState(rightState)
           @M hy_rk_ff_resetpointers

           @M hy_rk_loop_end 

           
           @M hy_rk_ff_aomp7
           
              
           ! Check for shocks in the zones involved in flux calculation
           @M hy_inShock

           ! Now call the Riemann solver to compute fluxes
           !!klim(LOW,1)=klim(LOW,1)+1
           @M hy_rk_ff_aomp8
           @M hy_rk_loop      
           @M hy_riemann_call
           @M hy_rk_loop_end
           
           @M hy_rk_ff_aomp9
           @M hy_rk_loop      
           ! Add artificial viscosity for strong-shock capturing
           @M hy_avisc
           ! Here, we compute the species and mass scalar
           ! fluxes based on the density flux and the reconstructed
           ! mass scalar interface values
           
           @M hy_rk_ff_setpointers
           @M hy_mscalarFluxes(hy_flux,leftState,rightState)
           @M hy_rk_ff_resetpointers
           @M hy_rk_loop_end
           ! ***************
           ! Fluxes computed for one face of this zone
           ! Save the fluxes
           ! ***************
           @M hy_rk_ff_aomp10
           
           @M hy_rk_loop      
           @M hy_saveFluxes
           @M hy_rk_loop_end

           @M hy_rk_3
        !release pointers
        @M hy_nullify
     @M hy_dim_loop_end
     @M hy_rk_ff_comp3
    
  end do ! dir
  @M hy_rk_ff_comp4
  @M hy_rk_ff_aomp11
 


contains

  !!Set loop dimensions based on the direction of the pencil set

  !! the 'pencil' holds a 1D array of the solution data to be operated
  !! on.  It is unrolled this way so that all data that are needed for
  !! interpolation and flux calculation are truly contiguous in memory
  !! space.  And so that it all fits in cache at once...
  !! The maximum amount of calculation is done on these data prior to
  !! reseting the pencil data to a new ray through the block.
  !! If I were talented at ASCII art, I would make a diagram...


  !~ Flattening has not been tested yet in FLASH5, only 1D & 2D runs so far.
  subroutine flattening(hy_flat3d,limits)
    !! This follows Miller & Colella 2002
    use Hydro_data, ONLY : hy_starState
    implicit none
    integer, intent(IN), dimension(LOW:HIGH,MDIM) :: limits
    !real, intent(OUT) :: hy_flat3d(GRID_IHI_GC,GRID_JHI_GC,GRID_KHI_GC)
    !real :: hy_flatTilde(NDIM,GRID_IHI_GC,GRID_JHI_GC,GRID_KHI_GC)
    real, intent(OUT) :: hy_flat3d(xLoGC:xHiGC,yLoGC:yHiGC,zLoGC:zHiGC)
    real :: hy_flatTilde(NDIM,xLoGC:xHiGC,yLoGC:yHiGC,zLoGC:zHiGC)
    real :: beta, Z
    real, parameter :: betaMin = 0.75, betaMax = 0.85
    real, parameter :: Zmin = 0.25, Zmax = 0.75
    integer :: i,j,k, kx, ky, kz
    kx = 1
    ky = 0
    kz = 0
#if NDIM>1
    ky = 1
#if NDIM==3
    kz = 1
#endif
#endif
    do k=limits(LOW,KAXIS)-kz, limits(HIGH,KAXIS)+kz
       do j=limits(LOW,JAXIS)-ky, limits(HIGH,JAXIS)+ky
          do i=limits(LOW,IAXIS)-kx, limits(HIGH,IAXIS)+kx
             !1e-99 used to be TINY(1.0) but that produced Seg Faults
             beta = abs(hy_starState(PRES_VAR,i+1,j,k)-hy_starState(PRES_VAR,i-1,j,k)) &
                  / max(1e-99, abs(hy_starState(PRES_VAR,i+2,j,k)-hy_starState(PRES_VAR,i-2,j,k)))
             Z    = abs(hy_starState(PRES_VAR,i+1,j,k)-hy_starState(PRES_VAR,i-1,j,k)) &
                  / (hy_starState(GAMC_VAR,i,j,k)*hy_starState(PRES_VAR,i,j,k))
             hy_flatTilde(IAXIS,i,j,k) = max(0.,min(1.,(betaMax-beta)/(betaMax-betaMin)))
             if (hy_starState(VELX_VAR,i+1,j,k)<hy_starState(VELX_VAR,i,j,k)) then
                hy_flatTilde(IAXIS,i,j,k) = max(hy_flatTilde(IAXIS,i,j,k), &
                     &                   min(1., (Zmax-Z)/(Zmax-Zmin)))
             else
                hy_flatTilde(IAXIS,i,j,k) = 1.0
             end if
#if NDIM>1
             beta = abs(hy_starState(PRES_VAR,i,j+1,k)-hy_starState(PRES_VAR,i,j-1,k)) &
                  / max(1.e-99,abs(hy_starState(PRES_VAR,i,j+2,k)-hy_starState(PRES_VAR,i,j-2,k)))
             Z    = abs(hy_starState(PRES_VAR,i,j+1,k)-hy_starState(PRES_VAR,i,j-1,k)) &
                  / (hy_starState(GAMC_VAR,i,j,k)*hy_starState(PRES_VAR,i,j,k))
             hy_flatTilde(JAXIS,i,j,k) = max(0.,min(1.,(betaMax-beta)/(betaMax-betaMin)))
             if (hy_starState(VELY_VAR,i,j+1,k)<hy_starState(VELY_VAR,i,j,k)) then
                hy_flatTilde(JAXIS,i,j,k) = max(hy_flatTilde(JAXIS,i,j,k), &
                     &                   min(1., (Zmax-Z)/(Zmax-Zmin)))
             else
                hy_flatTilde(JAXIS,i,j,k) = 1.0
             end if
#if NDIM==3
             beta = abs(hy_starState(PRES_VAR,i,j,k+1)-hy_starState(PRES_VAR,i,j,k-1)) &
                  / max(1.e-99,abs(hy_starState(PRES_VAR,i,j,k+2)-hy_starState(PRES_VAR,i,j,k-2)))
             Z    = abs(hy_starState(PRES_VAR,i,j,k+1)-hy_starState(PRES_VAR,i,j,k-1)) &
                  / (hy_starState(GAMC_VAR,i,j,k)*hy_starState(PRES_VAR,i,j,k))
             hy_flatTilde(KAXIS,i,j,k) = max(0.,min(1.,(betaMax-beta)/(betaMax-betaMin)))
             if (hy_starState(VELZ_VAR,i,j,k+1)<hy_starState(VELZ_VAR,i,j,k)) then
                hy_flatTilde(KAXIS,i,j,k) = max(hy_flatTilde(KAXIS,i,j,k), &
                     &                   min(1., (Zmax-Z)/(Zmax-Zmin)))
             else
                hy_flatTilde(KAXIS,i,j,k) = 1.0
             end if
#endif
#endif
          end do
       end do
    end do
    do k=limits(LOW,KAXIS)-kz, limits(HIGH,KAXIS)+kz
       do j=limits(LOW,JAXIS)-ky, limits(HIGH,JAXIS)+ky
          do i=limits(LOW,IAXIS)-kx, limits(HIGH,IAXIS)+kx
             hy_flat3d(i,j,k) = minval(hy_flatTilde(1:NDIM,i,j,k))
#ifdef FLAT_VAR
             hy_starState(FLAT_VAR,i,j,k) = hy_flat3d(i,j,k)
#endif
          end do
       end do
    end do
  end subroutine flattening

end subroutine @M hy_rk_ff_name

#include "@M hy_riemann_name.F90"
#include "@M hy_recon_name.F90"
#include "prim2con.F90"
#include "prim2flx.F90"

real function minmod(a,b)
  implicit none
  real :: a,b
  minmod=.5 * (sign(1.,a) + sign(1.,b))*min(abs(a),abs(b))
end function minmod

