!!****if* source/physics/Hydro/HydroMain/Spark/Hydro_correctGravSrc
!! NOTICE
!!  Copyright 2022 UChicago Argonne, LLC and contributors
!!
!!  Licensed under the Apache License, Version 2.0 (the "License");
!!  you may not use this file except in compliance with the License.
!!
!!  Unless required by applicable law or agreed to in writing, software
!!  distributed under the License is distributed on an "AS IS" BASIS,
!!  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
!!  See the License for the specific language governing permissions and
!!  limitations under the License.
!!
!!
!! NAME
!!
!!  Hydro_correctGravSrc
!!
!!
!! SYNOPSIS
!!                           
!!  Hydro_correctGravSrc(real(IN)    :: dt)
!!
!!
!! DESCRIPTION
!!
!!  Corrects gravitational source terms with n+1 potential to make source
!!  source terms second-order accurate
!!
!! ARGUMENTS
!!
!!  dt         - timestep
!!
!!***
!!Reorder(4):solnData

subroutine Hydro_correctGravSrc(dt)
  @M iter_use
  use Hydro_data, ONLY : hy_grav, hy_useTiling, hy_del
  
  implicit none

#include "Simulation.h"
#include "constants.h"
#include "Spark.h"

  @M iter_declare(blkLimits,blkLimitsGC,grownLimits)
  real,    intent(in) :: dt

  integer :: n, i, j, k

  real, dimension(MDIM) :: momOld, momNew
  real :: ekin
  integer,dimension(LOW:HIGH,MDIM)::limits

  @M iter_all_begin(LEAF,.false.,blkLimits,blkLimitsGC)
     limits=blkLimits
     call @M hy_grav_name(@M hy_grav_call_args)

     do k = blkLimits(LOW,KAXIS), blkLimits(HIGH,KAXIS)
        do j = blkLimits(LOW,JAXIS), blkLimits(HIGH,JAXIS)
           do i = blkLimits(LOW,IAXIS), blkLimits(HIGH,IAXIS)
              momOld = Uin(DENS_VAR,i,j,k)*Uin(VELX_VAR:VELZ_VAR,i,j,k)
              momNew = momOld + 0.5*dt*Uin(DENS_VAR,i,j,k)*hy_grav(:,i,j,k)
              Uin(ENER_VAR,i,j,k) = Uin(ENER_VAR,i,j,k) &
                   + 0.5*dt*dot_product(momNew, hy_grav(:,i,j,k))/Uin(DENS_VAR,i,j,k)
              Uin(VELX_VAR:VELZ_VAR,i,j,k) = momNew/Uin(DENS_VAR,i,j,k)
              ! ekin = 0.5*dot_product(Uin(VELX_VAR:VELZ_VAR,i,j,k), &
              !      Uin(VELX_VAR:VELZ_VAR,i,j,k))
              ! print *, (Uin(EINT_VAR,i,j,k) - (Uin(ENER_VAR,i,j,k)-ekin))/Uin(EINT_VAR,i,j,k)
           end do
        end do
     end do
  @M iter_end
  return
end subroutine Hydro_correctGravSrc
