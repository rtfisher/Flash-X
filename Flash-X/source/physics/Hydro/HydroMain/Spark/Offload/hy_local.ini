[hy_name]
definition=
  Hydro_Offload

[hy_funcs_name]
definition=
   Hydro_funcs_Offload

[hy_riemann_name]
definition=
   riemann_Offload

[hy_recon_name]
definition=
   reconstruct_Offload


[hy_rk_ff_name]
definition=
   hy_rk_getFaceFlux_offload

[hy_rk_ff_args]
definition=
   blklimits,blkLimitsGC, limits


[hy_rk_ff_use]
definition=
   use Hydro_offload_data, ONLY : hy_snake, hy_uPlus, hy_uMinus, hy_flat, hy_grv, hy_shck, hy_flux, &
                          hy_flat3d
   use Hydro_data, ONLY : hy_del, hy_dlim


[hy_grav_name]
definition=
   hy_rk_getGravAccel_Offload

[hy_grav_call_args]
definition =
  hy_del,limits,blkLimitsGC,level

[hy_update_name]
definition =
   hy_rk_updateSoln_Offload

[hy_update_call_args]
definition =
    Uin,blkLimits,blklimitsGC,level,hy_del, dt, dtOld, limits, coeffs

[hy_geofacs]
definition =

[hy_check_device]
definition =
   call check_if_on_GPU()

[hy_renormAbundance]
definition =
    call Driver_abort("Grid_renormAbundance not implemented in SPARK with GPU offloading yet")


[hy_rk_ff_setpointers]
definition =
    leftState => hy_uPlus
    rightState => hy_uMinus
    

[hy_rk_ff_resetpointers]
definition =
    nullify(leftState)
    nullify(rightState)


[hy_snake_allocate]
definition =
  if (.not. scratch_allocated) then 
     scratch_allocated = .true.
     if (.NOT. allocated(hy_uPlus)) then
        allocate(hy_uPlus(NRECON,max_edge,max_edge_y,max_edge_z))
        hy_uPlus = 0.
     endif
     if (.NOT. allocated(hy_uMinus)) then
        allocate(hy_uMinus(NRECON,max_edge,max_edge_y,max_edge_z))
        hy_uMinus = 0.
     endif
     if (.NOT. allocated(hy_shck)) then
        allocate(hy_shck(max_edge,max_edge_y,max_edge_z))
        hy_shck = 0.
     endif
     if (.NOT. allocated(hy_snake)) then
        allocate(hy_snake(NRECON,max_edge,max_edge_y,max_edge_z))
        hy_snake = 0.
     endif
     if (.NOT. allocated(hy_flat)) then
        allocate(hy_flat(max_edge,max_edge_y,max_edge_z))
        hy_flat = 0.
     endif
     if (.NOT. allocated(hy_grv)) then
        allocate(hy_grv(max_edge,max_edge_y,max_edge_z))
        hy_grv = 0.
     endif
     if (.NOT. allocated(hy_flux)) then
        allocate(hy_flux(NFLUXES,max_edge,max_edge_y,max_edge_z))
        hy_flux = 0.
     endif
     !$omp target enter data map(alloc:hy_flat,hy_shck,hy_snake,hy_uMinus,hy_uPlus,hy_grv,hy_flux)
  endif



[hy_rk_pointers]
definition=
  real, pointer,dimension(:,:,:,:) :: leftState, rightState

[hy_inShock]
definition=

[hy_tmp_ind]
definition=
           

[hy_setPencil]
definition=

[hy_releasePencil]
definition=


[hy_setLoop]
definition =
      select case(dir)
      case (IAXIS)
         hy_dlim(:,:) = limits(:,:)
         gCells(1) = (limits(LOW,IAXIS) - blkLimitsGC(LOW,IAXIS))
         gCells(2) = (limits(LOW,JAXIS) - blkLimitsGC(LOW,JAXIS))
         gCells(3) = (limits(LOW,KAXIS) - blkLimitsGC(LOW,KAXIS))
         dir_str = "_x"
      case (JAXIS)
         hy_dlim(:,1) = limits(:,JAXIS)
         hy_dlim(:,2) = limits(:,IAXIS)
         hy_dlim(:,3) = limits(:,KAXIS)
         gCells(1) = (limits(LOW,JAXIS) - blkLimitsGC(LOW,JAXIS))
         gCells(2) = (limits(LOW,IAXIS) - blkLimitsGC(LOW,IAXIS))
         gCells(3) = (limits(LOW,KAXIS) - blkLimitsGC(LOW,KAXIS))
         dir_str = "_y"
      case (KAXIS)
         hy_dlim(:,1) = limits(:,KAXIS)
         hy_dlim(:,2) = limits(:,IAXIS)
         hy_dlim(:,3) = limits(:,JAXIS)
         gCells(1) = (limits(LOW,KAXIS) - blkLimitsGC(LOW,KAXIS))
         gCells(2) = (limits(LOW,IAXIS) - blkLimitsGC(LOW,IAXIS))
         gCells(3) = (limits(LOW,JAXIS) - blkLimitsGC(LOW,JAXIS))
         dir_str = "_z"
      end select


[hy_saveFluxes]
definition =
     i_s = -1+i1+hy_dlim(LOW,1)-gCells(1)
     j_s = -1+i2+hy_dlim(LOW,2)-gCells(2)
     k_s = -1+i3+hy_dlim(LOW,3)-gCells(3)
     select case(dir)
     case(IAXIS)
        hy_flx(:,i_s,j_s,k_s) = hy_flux(:,i1,i2,i3)
     case (JAXIS)
        hy_fly(:,j_s,i_s,k_s) = hy_flux(:,i1,i2,i3)
     case (KAXIS)
        hy_flz(:,j_s,k_s,i_s) = hy_flux(:,i1,i2,i3)
     end select


[hy_snake_loop]
definition = 
   do k = hy_dlim(LOW,3) - gCells(3), hy_dlim(HIGH,3) + gCells(3)
      do j = hy_dlim(LOW,2) - gCells(2), hy_dlim(HIGH,2) + gCells(2)
         do i = hy_dlim(LOW,1) - gCells(1), hy_dlim(HIGH,1) + gCells(1)
        i_s = 1 + i - hy_dlim(LOW,1) + gCells(1)
        j_s = 1 + j - hy_dlim(LOW,2) + gCells(2)
        k_s = 1 + k - hy_dlim(LOW,3) + gCells(3)


[hy_snake_loop_end]
definition =
  @M loop_end_3d


[hy_dim_loop]
definition = 

[hy_dim_loop_end]
definition =

[hy_nullify]
definition =

[hy_isn]
type=inline
definition =
 i_s,j_s,k_s


[hy_setLims_FF]
definition=
  klim(LOW,:)=gCells(:)+1
  klim(LOW,1)=gCells(1)
  klim(HIGH,:)=1 + gCells(:) + hy_dlim(HIGH,:) - hy_dlim(LOW,:)
  klim(HIGH,1)=klim(HIGH,1)+1

[hy_ix123]
definition =
   ,:,:,:

[hy_i123]
definition =
   ,i1,i2,i3

[hy_123]
definition =
   (i1,i2,i3)



[hy_ix12]
definition =
   ,:,:

[hy_i23]
type = inline
definition =
  ,i2,i3


[hy_rk_loop]
definition =
   @M loop_3d_alt(klim)

[hy_rk_loop_end]
definition = 
   @M loop_end_3d

[hy_recon_call]
definition=
    do v=1,NRECON
        call @M hy_recon_name(@M hy_recon_call_args)
    enddo 

[hy_rk_1]
definition =

[hy_rk_2]
definition =

[hy_rk_3]
definition=


[hy_im]
type =inline
args=x1
definition =
  v,i1-x1,i2,i3

[hy_ip]
type =inline
args=x1
definition =
  v,i1+x1,i2,i3

[hy_recon_loop]
definition =


[hy_recon_loop_end]
definition =

[hy_recon_use]
definition =
    use hydro_offload_data, only : hy_uPlus, hy_uMinus, hy_snake, hy_flat
 
[hy_recon_call_args]
definition = 
  i1,i2,i3,v


[hy_recon_declare]
definition =
     integer, intent(IN) :: i1,i2,i3,v

[hy_flat]
definition =
  hy_flat(i1,i2,i3)

[hy_riemann_call_args]
definition =
  i1,i2,i3,dir

[hy_riemann_call]
definition =
   call @M hy_riemann_name(@M hy_riemann_call_args)

[hy_riemann_use]
definition =
     use Hydro_offload_data, only: hy_uPlus, hy_uMinus, hy_flux,hy_shck
     use Hydro_data, ONLY : hy_tiny, hy_hybridRiemann, hy_C_hyp


[hy_riemann_declare]
definition =
   !! Arguments type declaration -----------
  real, dimension(HY_NUM_VARS) :: VL, VR
  logical :: inShock
  real, pointer:: Fstar(:)
  real:: speed
  integer :: ierr, i1,i2,i3
  !! --------------------------------------

  real :: SL,SR,cfL,cfR,aL2,aR2,velNL,velNR
  real :: dStarL,dStarR,totalPresL,totalPresR
  real :: BxStar,ByStar,BzStar,Bn_hll,pStar,qStar
  real :: denomL,denomR,numerL,numerR
  real, dimension(HY_NUM_FLUX) :: UL,UR,Uhll,UCstarR,UCstarL
  real, dimension(HY_NUM_FLUX) :: FL,FR
  real :: magBL2,magBR2,magNL,magNR
  real :: Bn_glm, Psi_glm, u2, B2, E, Ptot, UB
  integer :: dir


[hy_riemann_assign]
definition=
  VL = hy_uPlus(1:HY_NUM_VARS,i1-1,i2,i3)
  VR = hy_uMinus(1:HY_NUM_VARS,i1,i2,i3)
  inShock = any(hy_shck(i1-1:i1,i2,i3) /= 0.0)
  Fstar => hy_flux(1:HY_NUM_FLUX,i1,i2,i3)


[hy_rk_ff_aomp1]
definition =
  !$omp target data map(to: dir, klim,hy_dlim,gCells)



[hy_rk_ff_aomp2]
definition =
 !$omp target teams distribute parallel do collapse(3) &
 !$omp shared(blkLimitsGC,hy_flat3d) private(i1,i2,i3) default(none) map(to:blkLimitsGC)



[hy_rk_ff_aomp3]
definition =
           !$omp target update to(klim, dir, hy_dlim,gCells)
           !$omp target teams distribute parallel do collapse(3) default(none) &
           !$omp shared(dir,hy_starState,hy_snake,hy_grv,hy_grav,hy_shck,hy_flat,&
           !$omp hy_flat3d,klim,gCells,hy_dlim) private(i,j,k,n,i_s, j_s, k_s)


[hy_rk_ff_aomp4]
definition =
      !$omp target teams distribute parallel do collapse(2) & ! This collapse 2 is because there is a data dependency
      !$omp private(i1,i2,i3) shared(hy_dlim,klim)


[hy_rk_ff_aomp5]
definition =
    !$omp target teams distribute parallel do collapse(4) &
     !$omp  private(i1,i2,i3,v) shared(klim,hy_uPlus, hy_uMinus, hy_snake, hy_flat) default(none)


[hy_rk_ff_aomp6]
definition =
      !$omp target teams distribute parallel do collapse(3) &
      !$omp private(i1,i2,i3,v) shared(dir,klim)


[hy_rk_ff_aomp7]
definition =
      !$omp target teams distribute parallel do collapse(2) & ! This collapse 2 is because there is a data dependency
      !$omp private(i1,i2,i3) shared(dir,klim)

[hy_rk_ff_aomp8]
definition =
      !$omp target teams distribute parallel do collapse(3) &
      !$omp private(i1,i2,i3) shared(dir,klim,hy_flux) default(none)

[hy_rk_ff_aomp9]
definition =
     !$omp target teams distribute parallel do collapse(3) &
      !$omp private(i1,i2,i3,cvisc,venerLo,venerHi) shared(hy_cvisc,hy_snake,dir,klim,hy_flux) default(none)
[hy_rk_ff_aomp10]
definition =
     !$omp target teams distribute parallel do collapse(3) &
      !$omp private(i1,i2,i3,i_s,j_s,k_s) shared(dir,hy_dlim,gCells,hy_flx,hy_fly,hy_flz,hy_flux,klim) default(none)

[hy_rk_ff_aomp11]
definition =
    !$omp end target data 


[hy_rk_ff_comp1]
definition =

[hy_rk_ff_comp2]
definition =

[hy_rk_ff_comp3]
definition =

[hy_rk_ff_comp4]
definition =

[hy_update_omp1]
definition =
  if (hy_geometry /= CARTESIAN) then
    call Driver_abort("Non Cartesian coordinates are not implemented in SPARK with GPU offloading yet")
  endif
  !$omp target teams distribute parallel do &
  !$omp default(none) &
  !$omp private(i,j,k)&
  !$omp shared(dt,limits,dtOld,coeffs,dx,dy,dz,dhdt) &
  !$omp map(to:dt,limits,dtOld,coeffs,dx,dy,dz,dhdt) &
  !$omp schedule(guided) collapse(3)


[hy_grv_omp1]
definition = 
  !$omp target teams distribute parallel do collapse(4) shared(blkLimitsGC,hy_grav) private(d,i,j,k) default(none) map(to:blkLimitsGC)!! TODO: Set this once for both rk steps.

[hy_grv_omp2]
definition = 
  !$omp target teams distribute parallel do collapse(2) & 
  !$omp private(k,j) shared(limits,hiGC,loGC,hy_grav,hy_del) map(to:limits,hiGC,loGC,hy_grav,hy_del)

[hy_grv_omp3]
definition = 
  !$omp target teams distribute parallel do collapse(2) & 
  !$omp private(k,j) shared(limits,hiGC,loGC,hy_grav,hy_del) map(to:limits,hiGC,loGC,hy_grav,hy_del)

[hy_grv_omp4]
definition = 
  !$omp target teams distribute parallel do collapse(2) & 
  !$omp private(k,j) shared(limits,hiGC,loGC,hy_grav,hy_del) map(to:limits,hiGC,loGC,hy_grav,hy_del)


[hy_saveState_omp]
definition =
  ! move data to GPU
  !$omp target enter data map(alloc:hy_starState,hy_flat3d,hy_tmpState,hy_flx,hy_fly,hy_flz,hy_grav)
  !$omp target update to(hy_tiny,hy_hybridRiemann,hy_C_hyp,hy_cvisc,hy_del,hy_smalldens, hy_smallE, hy_smallpres, hy_smallX,hy_geometry,hy_alphaGLM)
  ! distribute work throughout GPU
  !$omp target teams distribute parallel do collapse(4) map(to:blkLimitsGC,Uin) &
  !$omp shared(Uin,hy_starState,blkLimitsGC,hy_tmpState) private(v,i1,i2,i3) default(none)


[hy_update_omp]
definition =
  !hy_uPlus,hy_uMinus,hy_shck,hy_snake,hy_flat,hy_grv,hy_flux
  !$omp target exit data map(DELETE:hy_flat3d,hy_tmpState,hy_flx,hy_fly,hy_flz)
  !$omp target exit data map(DELETE:hy_grav)
  !$omp target update from(hy_starState)

[hy_update_omp2]
definition =
    !$omp target exit data map(DELETE:hy_starState)
